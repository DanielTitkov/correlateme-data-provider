// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package models

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"correlateme-data-provider/internal/model"
)

func newObservation(db *gorm.DB, opts ...gen.DOOption) observation {
	_observation := observation{}

	_observation.observationDo.UseDB(db, opts...)
	_observation.observationDo.UseModel(&model.Observation{})

	tableName := _observation.observationDo.TableName()
	_observation.ALL = field.NewAsterisk(tableName)
	_observation.ID = field.NewString(tableName, "id")
	_observation.MetricID = field.NewString(tableName, "metric_id")
	_observation.Value = field.NewFloat64(tableName, "value")
	_observation.Timestamp = field.NewTime(tableName, "timestamp")
	_observation.IsReconstructed = field.NewBool(tableName, "is_reconstructed")
	_observation.CreatedAt = field.NewTime(tableName, "created_at")
	_observation.Meta = field.NewString(tableName, "meta")
	_observation.UserID = field.NewString(tableName, "user_id")

	_observation.fillFieldMap()

	return _observation
}

type observation struct {
	observationDo

	ALL             field.Asterisk
	ID              field.String
	MetricID        field.String
	Value           field.Float64
	Timestamp       field.Time
	IsReconstructed field.Bool
	CreatedAt       field.Time
	Meta            field.String
	UserID          field.String

	fieldMap map[string]field.Expr
}

func (o observation) Table(newTableName string) *observation {
	o.observationDo.UseTable(newTableName)
	return o.updateTableName(newTableName)
}

func (o observation) As(alias string) *observation {
	o.observationDo.DO = *(o.observationDo.As(alias).(*gen.DO))
	return o.updateTableName(alias)
}

func (o *observation) updateTableName(table string) *observation {
	o.ALL = field.NewAsterisk(table)
	o.ID = field.NewString(table, "id")
	o.MetricID = field.NewString(table, "metric_id")
	o.Value = field.NewFloat64(table, "value")
	o.Timestamp = field.NewTime(table, "timestamp")
	o.IsReconstructed = field.NewBool(table, "is_reconstructed")
	o.CreatedAt = field.NewTime(table, "created_at")
	o.Meta = field.NewString(table, "meta")
	o.UserID = field.NewString(table, "user_id")

	o.fillFieldMap()

	return o
}

func (o *observation) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := o.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (o *observation) fillFieldMap() {
	o.fieldMap = make(map[string]field.Expr, 8)
	o.fieldMap["id"] = o.ID
	o.fieldMap["metric_id"] = o.MetricID
	o.fieldMap["value"] = o.Value
	o.fieldMap["timestamp"] = o.Timestamp
	o.fieldMap["is_reconstructed"] = o.IsReconstructed
	o.fieldMap["created_at"] = o.CreatedAt
	o.fieldMap["meta"] = o.Meta
	o.fieldMap["user_id"] = o.UserID
}

func (o observation) clone(db *gorm.DB) observation {
	o.observationDo.ReplaceConnPool(db.Statement.ConnPool)
	return o
}

func (o observation) replaceDB(db *gorm.DB) observation {
	o.observationDo.ReplaceDB(db)
	return o
}

type observationDo struct{ gen.DO }

type IObservationDo interface {
	gen.SubQuery
	Debug() IObservationDo
	WithContext(ctx context.Context) IObservationDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IObservationDo
	WriteDB() IObservationDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IObservationDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IObservationDo
	Not(conds ...gen.Condition) IObservationDo
	Or(conds ...gen.Condition) IObservationDo
	Select(conds ...field.Expr) IObservationDo
	Where(conds ...gen.Condition) IObservationDo
	Order(conds ...field.Expr) IObservationDo
	Distinct(cols ...field.Expr) IObservationDo
	Omit(cols ...field.Expr) IObservationDo
	Join(table schema.Tabler, on ...field.Expr) IObservationDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IObservationDo
	RightJoin(table schema.Tabler, on ...field.Expr) IObservationDo
	Group(cols ...field.Expr) IObservationDo
	Having(conds ...gen.Condition) IObservationDo
	Limit(limit int) IObservationDo
	Offset(offset int) IObservationDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IObservationDo
	Unscoped() IObservationDo
	Create(values ...*model.Observation) error
	CreateInBatches(values []*model.Observation, batchSize int) error
	Save(values ...*model.Observation) error
	First() (*model.Observation, error)
	Take() (*model.Observation, error)
	Last() (*model.Observation, error)
	Find() ([]*model.Observation, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Observation, err error)
	FindInBatches(result *[]*model.Observation, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Observation) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IObservationDo
	Assign(attrs ...field.AssignExpr) IObservationDo
	Joins(fields ...field.RelationField) IObservationDo
	Preload(fields ...field.RelationField) IObservationDo
	FirstOrInit() (*model.Observation, error)
	FirstOrCreate() (*model.Observation, error)
	FindByPage(offset int, limit int) (result []*model.Observation, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IObservationDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (o observationDo) Debug() IObservationDo {
	return o.withDO(o.DO.Debug())
}

func (o observationDo) WithContext(ctx context.Context) IObservationDo {
	return o.withDO(o.DO.WithContext(ctx))
}

func (o observationDo) ReadDB() IObservationDo {
	return o.Clauses(dbresolver.Read)
}

func (o observationDo) WriteDB() IObservationDo {
	return o.Clauses(dbresolver.Write)
}

func (o observationDo) Session(config *gorm.Session) IObservationDo {
	return o.withDO(o.DO.Session(config))
}

func (o observationDo) Clauses(conds ...clause.Expression) IObservationDo {
	return o.withDO(o.DO.Clauses(conds...))
}

func (o observationDo) Returning(value interface{}, columns ...string) IObservationDo {
	return o.withDO(o.DO.Returning(value, columns...))
}

func (o observationDo) Not(conds ...gen.Condition) IObservationDo {
	return o.withDO(o.DO.Not(conds...))
}

func (o observationDo) Or(conds ...gen.Condition) IObservationDo {
	return o.withDO(o.DO.Or(conds...))
}

func (o observationDo) Select(conds ...field.Expr) IObservationDo {
	return o.withDO(o.DO.Select(conds...))
}

func (o observationDo) Where(conds ...gen.Condition) IObservationDo {
	return o.withDO(o.DO.Where(conds...))
}

func (o observationDo) Order(conds ...field.Expr) IObservationDo {
	return o.withDO(o.DO.Order(conds...))
}

func (o observationDo) Distinct(cols ...field.Expr) IObservationDo {
	return o.withDO(o.DO.Distinct(cols...))
}

func (o observationDo) Omit(cols ...field.Expr) IObservationDo {
	return o.withDO(o.DO.Omit(cols...))
}

func (o observationDo) Join(table schema.Tabler, on ...field.Expr) IObservationDo {
	return o.withDO(o.DO.Join(table, on...))
}

func (o observationDo) LeftJoin(table schema.Tabler, on ...field.Expr) IObservationDo {
	return o.withDO(o.DO.LeftJoin(table, on...))
}

func (o observationDo) RightJoin(table schema.Tabler, on ...field.Expr) IObservationDo {
	return o.withDO(o.DO.RightJoin(table, on...))
}

func (o observationDo) Group(cols ...field.Expr) IObservationDo {
	return o.withDO(o.DO.Group(cols...))
}

func (o observationDo) Having(conds ...gen.Condition) IObservationDo {
	return o.withDO(o.DO.Having(conds...))
}

func (o observationDo) Limit(limit int) IObservationDo {
	return o.withDO(o.DO.Limit(limit))
}

func (o observationDo) Offset(offset int) IObservationDo {
	return o.withDO(o.DO.Offset(offset))
}

func (o observationDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IObservationDo {
	return o.withDO(o.DO.Scopes(funcs...))
}

func (o observationDo) Unscoped() IObservationDo {
	return o.withDO(o.DO.Unscoped())
}

func (o observationDo) Create(values ...*model.Observation) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Create(values)
}

func (o observationDo) CreateInBatches(values []*model.Observation, batchSize int) error {
	return o.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (o observationDo) Save(values ...*model.Observation) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Save(values)
}

func (o observationDo) First() (*model.Observation, error) {
	if result, err := o.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Observation), nil
	}
}

func (o observationDo) Take() (*model.Observation, error) {
	if result, err := o.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Observation), nil
	}
}

func (o observationDo) Last() (*model.Observation, error) {
	if result, err := o.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Observation), nil
	}
}

func (o observationDo) Find() ([]*model.Observation, error) {
	result, err := o.DO.Find()
	return result.([]*model.Observation), err
}

func (o observationDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Observation, err error) {
	buf := make([]*model.Observation, 0, batchSize)
	err = o.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (o observationDo) FindInBatches(result *[]*model.Observation, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return o.DO.FindInBatches(result, batchSize, fc)
}

func (o observationDo) Attrs(attrs ...field.AssignExpr) IObservationDo {
	return o.withDO(o.DO.Attrs(attrs...))
}

func (o observationDo) Assign(attrs ...field.AssignExpr) IObservationDo {
	return o.withDO(o.DO.Assign(attrs...))
}

func (o observationDo) Joins(fields ...field.RelationField) IObservationDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Joins(_f))
	}
	return &o
}

func (o observationDo) Preload(fields ...field.RelationField) IObservationDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Preload(_f))
	}
	return &o
}

func (o observationDo) FirstOrInit() (*model.Observation, error) {
	if result, err := o.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Observation), nil
	}
}

func (o observationDo) FirstOrCreate() (*model.Observation, error) {
	if result, err := o.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Observation), nil
	}
}

func (o observationDo) FindByPage(offset int, limit int) (result []*model.Observation, count int64, err error) {
	result, err = o.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = o.Offset(-1).Limit(-1).Count()
	return
}

func (o observationDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = o.Count()
	if err != nil {
		return
	}

	err = o.Offset(offset).Limit(limit).Scan(result)
	return
}

func (o observationDo) Scan(result interface{}) (err error) {
	return o.DO.Scan(result)
}

func (o observationDo) Delete(models ...*model.Observation) (result gen.ResultInfo, err error) {
	return o.DO.Delete(models)
}

func (o *observationDo) withDO(do gen.Dao) *observationDo {
	o.DO = *do.(*gen.DO)
	return o
}
